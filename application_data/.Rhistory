rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
g <- make_ring(10)
g <- connect.neighborhood(g, 2)
plot(g)
Named_v_graph <- graph( c("Mark",   "Silvia", "Silvia", "Mark",   "Mark", "Nasios", "Mark", "Arthur",
"Silvia", "Nasios",  "Nasios",  "Silvia", "Silvia", "Arthur", "Arthur", "Silvia",
isolates=c("Jesse", "Janis", "Robinzon", "Robinzon")))
# When the edge list has vertex names, the number of nodes is not needed
plot(Named_v_graph, edge.arrow.size=.5, vertex.color="Orange", vertex.size=15,
vertex.frame.color="Black", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=3, edge.curved=0.2)
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
# ADD AN EDGE
kite['A','F']=1
kite[]
library(shiny); runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
sliderInput("opacity",
label = "Range of Opacity:",
min = 0.1, max = 1, value = 0.4)
),
mainPanel(forceNetworkOutput("force", width = "100%", height = "700px"))
)
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
View(MisLinks)
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
install.packages("shinydashboard")
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shinydashboard)
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shinydashboard)
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
ui <- dashboardPage(
dashboardHeader(title = "Menu", titleWidth = 230),
dashboardSidebar(
sidebarMenu(
menuItem("General information", tabName = "general", icon = icon("info-circle")),
menuItem("Network visualization", tabName = "net_viz", icon = icon("eye"))
)
),
# ========================================================================
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "general",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "net_viz",
fluidPage(
titlePanel("Network visualization"),
mainPanel(
tabsetPanel(
tabPanel("Plot", forceNetworkOutput("force", width = "100%", height = "1000px")),
tabPanel("Summary", plotOutput("plot1", height = 250)),
# tabPanel("Table", tableOutput("table"))
)
)
)
)
# End of second Tab item
)
)
# ========================================================================
)
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shiny)
library(networkD3)
library(dplyr)
library(shinyWidgets)
library(shinydashboard)
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
View(edge_list_15p)
View(edge_list_15p)
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='nekroxshinyapps', token='1C34644CAEEFC90D7971C1DCA479E719', secret='mBEya5iAPnLABb/48SC/fcb4c79LiIArYhrkJVWA')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
install.packages("shinyjs")
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
library(shinyjs)
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app)
rsconnect::setAccountInfo(name='nekroxshinyapps', token='2D739D0A67CCC2B9DF8D0F9E1C7B3951', secret='yUFVKiyHoKgJGSI3z1t8pwm4n4yMQkSMV4McOLJg')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
rsconnect::setAccountInfo(name='nekroxshinyapps', token='2D739D0A67CCC2B9DF8D0F9E1C7B3951', secret='yUFVKiyHoKgJGSI3z1t8pwm4n4yMQkSMV4McOLJg')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
egocentric_edge_l = full_edge_list[which(full_edge_list[,1] == 28845),]
View(egocentric_edge_l)
library(igraph)
edges <- data.frame(from=c(1,2,2,3,3,4,4,5,5), to=c(2,3,4,4,5,6,7,7,8))
View(edges)
g <- graph_from_data_frame(edges)
ego_node <- 2
neighbors <- neighbors(g, ego_node)
ego_net <- induced_subgraph(g, c(ego_node, neighbors))
plot(ego_net)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l = full_edge_list[which(full_edge_list[,1] == 28845),]
other_nodes_list = ego_n_others_edge_l$B
other_e_nodes_edge_l <- ego_n_others_edge_l[ego_n_others_edge_l$A %in% ego_n_others_edge_l$B
& ego_n_others_edge_l$B %in% ego_n_others_edge_l$B,]
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
_list <- ego_n_others_edge_l$B
ego_n_list <- ego_n_others_edge_l$B
View(ego_n_others_edge_l)
other_e_nodes_edge_l <- ego_n_others_edge_l[ego_n_others_edge_l$A %in% ego_n_list
& ego_n_others_edge_l$B %in% ego_n_list,]
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_list
& full_edge_list$B %in% ego_n_list,]
View(other_e_nodes_edge_l)
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
View(ego_centric_edge_list)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE, vertices = NULL)
n1 <- neighbors(g, 1)
View(ego_centric_edge_list)
ego_net <- induced_subgraph(g, c(28845, n1))
View(g)
ego_net <- induced_subgraph(g, c("28845", n1))
plot(g)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE, vertices = NULL)
ego_node <- 28845
# Create the egocentric subgraph using make_ego_graph()
ego_subgraph <- make_ego_graph(g, order = 1, nodes = ego_node, mode = "all")
View(full_edge_list)
View(g)
g[1]
ego_subgraph <- make_ego_graph(g, order = 1, nodes = ego_n_list, mode = "all")
g <- make_ring(10)
# Choose a node for the egocentric network
ego_node <- 5
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = ego_node, mode = "all")
# Plot the egocentric network
plot(ego_g)
g <- make_ring(10)
# Choose a node for the egocentric network
ego_node <- 5
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = ego_node, mode = "all")
View(ego_g)
plot(g)
plot(ego_g)
ego_g <- make_ego_graph(g, order = 2, nodes = ego_node, mode = "all")
plot(ego_g)
plot(ego_g[1])
plot(ego_g[0])
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = ego_node, mode = "all")
plot(ego_g[[1]])
plot(g)
View(g)
ego_g <- make_ego_graph(g, order = 1, nodes = 2, mode = "all")
plot(ego_g[[1]])
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = 6, mode = "all")
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 1, mode = "all")
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 2, mode = "all")
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 3, mode = "all")
plot(ego_g[[1]])
View(ego_g)
ego_g <- make_ego_graph(g, order = 1, nodes = 8)
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 1)
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 3)
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 4)
plot(ego_g[[1]])
plot(ego_g[[1]])
list <- c(1,2)
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = list)
plot(ego_g[[1]])
list <- c(1,2,3,4)
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = list)
plot(ego_g[[1]])
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE, vertices = NULL)
plot(g)
ego_g <- make_ego_graph(g, order = 1, nodes = 28845)
View(g)
# Make an egocentric network for the chosen node
ego_g <- make_ego_graph(g, order = 1, nodes = 1)
plot(ego_g[[1]])
ego_g <- make_ego_graph(g, order = 1, nodes = 4)
plot(ego_g[[1]])
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE, vertices = NULL)
layout <- layout_with_sugiyama(g, root = which(V(g)$name == 28845))
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE)
layout <- layout_with_sugiyama(g, root = which(V(g)$name == 28845))
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE, vertices = NULL)
View(ego_centric_edge_list)
View(g)
layout <- layout.circle(g)
plot(g, layout = layout)
View(g)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE)
layout <- layout.circle(g)
# Plot the graph with node 4 in the center
plot(g, layout = layout)
plot(g)
plot(g)
plot(g)
plot(g)
plot(g)
plot(g)
plot(g)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE)
plot(g)
layout <- layout_nicely(g, dim = 2, center = which(V(g)$name == 28845))
layout <- layout_nicely(g, dim = 2, center = which(V(g)$name == 1))
layout <- layout_nicely(g, dim = 2, center = 28845)
layout <- layout_nicely(g, dim = 2, center = 1)
edges <- data.frame(from = c(1, 2, 3, 4), to = c(2, 3, 1, 4))
g <- graph_from_data_frame(edges)
# Specify the node to place at the center
center_node <- 4
# Generate the layout with the center node at the center
layout <- layout_nicely(g, dim = 2, center = which(V(g)$name == center_node))
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
ego_n_others_edge_l <- full_edge_list[which(full_edge_list[,1] == 28845),]
ego_n_list <- ego_n_others_edge_l$B
other_e_nodes_edge_l <- full_edge_list[full_edge_list$A %in% ego_n_others_edge_l$B
& full_edge_list$B %in% ego_n_others_edge_l$B,]
ego_centric_edge_list <- rbind(ego_n_others_edge_l,other_e_nodes_edge_l)
g <- graph_from_data_frame(ego_centric_edge_list, directed = FALSE)
plot(g)
layout_as_star(g, center = V(g)[1])
layout <- layout_as_star(g, center = V(g)[1])
plot(g, layout = layout)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
x <- 3.14159
y <- sprintf("%.2f", x)
print(y)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
x <- 3.14859
y <- sprintf("%.2f", x)
print(y)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
source("~/Desktop/FYP_Project/Shiny/FYP_app/global.R", echo=TRUE)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
source("~/Desktop/FYP_Project/Shiny/FYP_app/global.R", echo=TRUE)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
