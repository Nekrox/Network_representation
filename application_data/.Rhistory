runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
View(edge_list_15p)
View(edge_list_15p)
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='nekroxshinyapps', token='1C34644CAEEFC90D7971C1DCA479E719', secret='mBEya5iAPnLABb/48SC/fcb4c79LiIArYhrkJVWA')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
install.packages("shinyjs")
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
library(shinyjs)
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app)
rsconnect::setAccountInfo(name='nekroxshinyapps', token='2D739D0A67CCC2B9DF8D0F9E1C7B3951', secret='yUFVKiyHoKgJGSI3z1t8pwm4n4yMQkSMV4McOLJg')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
rsconnect::setAccountInfo(name='nekroxshinyapps', token='2D739D0A67CCC2B9DF8D0F9E1C7B3951', secret='yUFVKiyHoKgJGSI3z1t8pwm4n4yMQkSMV4McOLJg')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
full_data_set <- read.csv(file = 'combined_data.csv')
full_edge_list <- read.csv(file = 'NOD_EDGE_LIST_FINAL.csv')
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_10p <- read.csv(file = 'edge_list_deg_81+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
edge_list_20p <- read.csv(file = 'edge_list_deg_73+.csv')
edge_list_25p <- read.csv(file = 'edge_list_deg_70+.csv')
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
updt_full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
View(updt_full_data)
summary(updt_full_data$event.start.date)
not_matching <- grep("[^\\d-]", updt_full_data$event.start.date, value = TRUE)
non_matching <- !grepl("^\\d{2}-\\d{2}-\\d{4}$", updt_full_data$event.start.date)
# Subset original column to get values that don't match
non_matching_values <- df$date_col[non_matching]
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
non_matching <- !grepl("^\\d{2}-\\d{2}-\\d{4}$", updt_full_data$event.start.date)
# Subset original column to get values that don't match
non_matching_values <- updt_full_data$event.start.date[non_matching]
non_matching_values
cleaned_data_frame <- updt_full_data[complete.cases(updt_full_data$event.start.date), ]
View(cleaned_data_frame)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
updt_full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
View(updt_full_data)
View(updt_full_edge_list)
full_edge_list <- read.csv(file = 'NOD_EDGE_LIST_FINAL.csv')
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
updt_full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
View(updt_full_edge_list)
View(updt_full_data)
my_data_na <- my_data[is.na(updt_full_data$event.start.date), ]
my_data_na <- updt_full_data[is.na(updt_full_data$event.start.date), ]
View(my_data_na)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
sapply(1:length(updt_full_data$event.start.date),
function(x) substr( updt_full_data$event.start.date[x],
nchar(updt_full_data$event.start.date[x])-3,
nchar(updt_full_data$event.start.date[x])) )
years <- sapply(1:length(updt_full_data$event.start.date),
function(x) substr( updt_full_data$event.start.date[x],
nchar(updt_full_data$event.start.date[x])-3,
nchar(updt_full_data$event.start.date[x])) )
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# non_matching <- !grepl("^\\d{2}-\\d{2}-\\d{4}$", updt_full_data$event.start.date)
# # Subset original column to get values that don't match
# non_matching_values <- updt_full_data$event.start.date[non_matching]
# remove all rows if in event.start.date there is a NA
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
View(filtered_updt_data)
filtered_updt_data$event.start.date <- years
View(filtered_updt_data)
View(filtered_updt_data)
count(filtered_updt_data$event.start.date)
summary(filtered_updt_data$event.start.date)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# non_matching <- !grepl("^\\d{2}-\\d{2}-\\d{4}$", updt_full_data$event.start.date)
# # Subset original column to get values that don't match
# non_matching_values <- updt_full_data$event.start.date[non_matching]
# remove all rows if in event.start.date there is a NA
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
filtered_updt_data$event.start.date <- as.integer(years)
View(filtered_updt_data)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
View(filtered_updt_data)
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
summary(filtered_updt_data$event.start.date)
occurance_table <- table(filtered_updt_data$event.start.date)
occurance_table
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in% names(occurance_table)[occurance_table > 1], ]
table(filtered_updt_data$event.start.date)
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
summary(filtered_updt_data$event.start.date)
table(filtered_updt_data$event.start.date)
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
write.csv(filtered_updt_data , "/Users/markshteingardt/Desktop/FYP_Project/clean_updt_full_data.csv", row.names=FALSE)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
View(updt_full_data)
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_data.csv')
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
selected_tf_df <- which(as.integer(updt_full_data$event.start.date) > 1900)
# load the data
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
selected_tf_df <- which(as.integer(updt_full_data$event.start.date) > 1900)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
class(updt_full_data$event.start.date[1])
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
filtered_updt_data$event.start.date <- as.integer(updt_full_data$event.start.date)
View(filtered_updt_data)
class(updt_full_data$event.start.date[1])
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
filtered_updt_data$event.start.date <- as.integer(as.numeric(updt_full_data$event.start.date))
source("~/Desktop/FYP_Project/Coding/data_prep/NEW_exportes_data_cleaning.R", echo=TRUE)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# filtered_updt_data$event.start.date <- as.integer(as.numeric(updt_full_data$event.start.date))
# # Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
filtered_updt_data$event.start.date <- as.integer(as.numeric(filtered_updt_data$event.start.date))
#
class(filtered_updt_data$event.start.date[1])
selected_tf_df <- which(updt_full_data$event.start.date > 1900)
selected_tf_df <- filtered_updt_data[which(updt_full_data$event.start.date > 1900)]
selected_tf_df <- which((updt_full_data$event.start.date > 1900) &&
(updt_full_data$event.start.date < 1950))
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
filtered_updt_data$event.start.date <- as.integer(as.numeric(filtered_updt_data$event.start.date))
#
selected_tf_df <- which((updt_full_data$event.start.date >= 1900) && (updt_full_data$event.start.date <= 1950))
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
filtered_updt_data$event.start.date <- as.integer(as.numeric(filtered_updt_data$event.start.date))
#
selected_tf_df <- updt_full_data[updt_full_data$event.start.date >= 1900 & updt_full_data$event.start.date <= 1950, ]
View(selected_tf_df)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
filtered_updt_data$event.start.date <- as.integer(as.numeric(filtered_updt_data$event.start.date))
#
selected_tf_df <- updt_full_data[(updt_full_data$event.start.date >= 1900) && (updt_full_data$event.start.date <= 1950), ]
selected_tf_df <- updt_full_data[updt_full_data$event.start.date >= 1900 & updt_full_data$event.start.date <= 1950, ]
View(selected_tf_df)
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'updt_combined_TOBEDELETED.csv')
# created a filtered version of the df without NA values (data contained 516 NA values)
filtered_updt_data <- updt_full_data[!is.na(updt_full_data$event.start.date), ]
# create a list of years, based on the event.start.date in the filtered data.
# Note that small percent of the data was entered incorrectly.
years <- sapply(1:length(filtered_updt_data$event.start.date),
function(x) substr( filtered_updt_data$event.start.date[x],
nchar(filtered_updt_data$event.start.date[x])-3,
nchar(filtered_updt_data$event.start.date[x])) )
# since there are a few istances of corrupted data, values are converted from the
# string to integer value. In that case all non-correct values turned into NA.
filtered_updt_data$event.start.date <- as.integer(years)
# While examining the new filtered data, it was noticed (by sorting in osebding order)
# that one value is 993 when it should be 993
row_n <- which(filtered_updt_data$event.start.date == 993)
filtered_updt_data$event.start.date[row_n] <- 1993
# Lastly, we need to remove instanses where the is only one recored per year.
# Note that previously preist data was subseted using less efficient code
occurance_table <- table(filtered_updt_data$event.start.date)
filtered_updt_data <- filtered_updt_data[filtered_updt_data$event.start.date %in%
names(occurance_table)[occurance_table > 1], ]
# That gives us a clean subset of data where Min year is 1593 and Max 1993
filtered_updt_data$event.start.date <- as.integer(as.numeric(filtered_updt_data$event.start.date))
#
write.csv(filtered_updt_data , "/Users/markshteingardt/Desktop/FYP_Project/clean_updt_full_data.csv", row.names=FALSE)
source("~/Desktop/FYP_Project/Coding/data_prep/NEW_exportes_data_cleaning.R")
setwd("~/Desktop/FYP_Project/Shiny/FYP_app/application_data")
updt_full_data <- read.csv(file = 'clean_updt_full_data.csv')
View(updt_full_data)
selected_tf_df = subset(updt_full_data, event.start.date >= 1900 & event.start.date < 1950)
View(selected_tf_df)
uniqe_list <- unique(selected_tf_df$node.ID)
View(selected_tf_df)
summary(uniqe_list)
full_edge_list <- read.csv(file = 'upd_full_edge_list.csv')
class(full_edge_list$A[1])
tf_edge_list <- full_edge_list[full_edge_list$A %in% uniqe_list & full_edge_list$B %in% uniqe_list, ]
View(tf_edge_list)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
