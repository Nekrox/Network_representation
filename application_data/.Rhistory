plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, m=40 p=.02) ####can also use erdos.renyi.game
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnm(n=100, m=40) # M represents the number of edges
## options include directed= and loops=
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnm(n=100, m=40) # M represents the number of edges
## options include directed= and loops=
plot(er, vertex.size=6, vertex.label=NA)
# Probability
er <- sample_gnp(n=100, p=.02)
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnm(n=100, m=40) # M represents the number of edges
## options include directed= and loops=
plot(er, vertex.size=6, vertex.label=NA)
# Probability
er <- sample_gnp(n=100, p=.2)
plot(er, vertex.size=6, vertex.label=NA)
er <- sample_gnm(n=100, m=40) # M represents the number of edges
## options include directed= and loops=
plot(er, vertex.size=6, vertex.label=NA)
# Probability
er <- sample_gnp(n=100, p=.002)
plot(er, vertex.size=6, vertex.label=NA)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:7]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
kite[]
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
kite[]
kite['A','F']=1
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
kite['A','F']=1
kite[]
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
eg <- make_empty_graph(13)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(7)
plot(fg, vertex.size=10, vertex.label=NA)
eg <- make_empty_graph(13)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(7)
plot(fg, vertex.size=10, vertex.label=NA)
print(fg)
eg <- make_empty_graph(13)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(7)
plot(fg, vertex.size=10, vertex.label=NA)
print(fg, max.lines)
eg <- make_empty_graph(13)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(7)
plot(fg, vertex.size=10, vertex.label=NA)
summary(fg)
eg <- make_empty_graph(13)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(7)
plot(fg, vertex.size=10, vertex.label=NA)
print(fg)
knitr::opts_chunk$set(echo = TRUE)
rn <- make_ring(20)
library(igraph)
library(igraphdata)
rn <- make_ring(20)
plot(rn, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probabiltiy of
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probabiltiy of
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probabiltiy of
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 10)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 100)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 1)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 3)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 5)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
g <- connect(g, 2)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
g <- make_ring(10)
g <- connect(g, 2)
plot(g)
# Original ring graph with 40 nodes
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Same graph but the probability of 10%
rn.rewired <- rewire(rn, each_edge(prob=0.1))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Function to connect vertices if they are within a given distance (7 in this case)
rn.neigh = connect.neighborhood(rn, 7)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
g <- make_ring(10)
g <- connect.neighborhood(g, 2)
plot(g)
Named_v_graph <- graph( c("Mark",   "Silvia", "Silvia", "Mark",   "Mark", "Nasios", "Mark", "Arthur",
"Silvia", "Nasios",  "Nasios",  "Silvia", "Silvia", "Arthur", "Arthur", "Silvia",
isolates=c("Jesse", "Janis", "Robinzon", "Robinzon")))
# When the edge list has vertex names, the number of nodes is not needed
plot(Named_v_graph, edge.arrow.size=.5, vertex.color="Orange", vertex.size=15,
vertex.frame.color="Black", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=3, edge.curved=0.2)
kite <- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) +
edges('A','B', 'B','D', 'C','D', 'D','E', 'E','G', 'F','G', 'G','H', 'H','I', 'I','J')
plot(kite)
# ADD AN EDGE
kite['A','F']=1
kite[]
library(shiny); runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
sliderInput("opacity",
label = "Range of Opacity:",
min = 0.1, max = 1, value = 0.4)
),
mainPanel(forceNetworkOutput("force", width = "100%", height = "700px"))
)
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
View(MisLinks)
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Learning_Shiny/network_representation_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
install.packages("shinydashboard")
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shinydashboard)
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shinydashboard)
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
ui <- dashboardPage(
dashboardHeader(title = "Menu", titleWidth = 230),
dashboardSidebar(
sidebarMenu(
menuItem("General information", tabName = "general", icon = icon("info-circle")),
menuItem("Network visualization", tabName = "net_viz", icon = icon("eye"))
)
),
# ========================================================================
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "general",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "net_viz",
fluidPage(
titlePanel("Network visualization"),
mainPanel(
tabsetPanel(
tabPanel("Plot", forceNetworkOutput("force", width = "100%", height = "1000px")),
tabPanel("Summary", plotOutput("plot1", height = 250)),
# tabPanel("Table", tableOutput("table"))
)
)
)
)
# End of second Tab item
)
)
# ========================================================================
)
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/demo_for_force_network/demo_app.R')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shiny)
library(networkD3)
library(dplyr)
library(shinyWidgets)
library(shinydashboard)
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
library(shiny); runApp('Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
runApp('Desktop/FYP_Project/Shiny/Dashboard_practice')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
shiny::runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
runApp('Desktop/FYP_Project/Shiny/FYP_app')
source("~/Desktop/FYP_Project/Shiny/FYP_app/global.R", echo=TRUE)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
graph_object <- graph_from_data_frame(edge_list_5p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
decomposed_g <- decompose.graph(graph_object)
View(decomposed_g)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
graph_object <- graph_from_data_frame(edge_list_5p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
decomposed_g <- decompose.graph(graph_object)
gfgd <- graph_from_data_frame(edge_list_15p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
g_15 <- decompose.graph(gfgd)
View(decomposed_g)
View(g_15)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
graph_object <- graph_from_data_frame(edge_list_5p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
decomposed_g <- decompose.graph(graph_object)
gfgd <- graph_from_data_frame(edge_list_15p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
g_15 <- decompose.graph(gfgd)
current_subgraph <- g_15[[6]] # Selects a subgraph chosen by the user
members <- membership(cluster_walktrap(current_subgraph, steps = 1))
my_sj_list <- igraph_to_networkD3(current_subgraph, group = members)
forceNetwork(Links = sj_list$links, Nodes = sj_list$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "group", # linkColour = "#4ECCA3"
opacity = 1, zoom = T, fontSize = 0, linkDistance = 350
)
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
graph_object <- graph_from_data_frame(edge_list_5p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
decomposed_g <- decompose.graph(graph_object)
gfgd <- graph_from_data_frame(edge_list_15p, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
g_15 <- decompose.graph(gfgd)
current_subgraph <- g_15[[6]] # Selects a subgraph chosen by the user
members <- membership(cluster_walktrap(current_subgraph, steps = 1))
sj_list <- igraph_to_networkD3(current_subgraph, group = members)
forceNetwork(Links = sj_list$links, Nodes = sj_list$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "group", # linkColour = "#4ECCA3"
opacity = 1, zoom = T, fontSize = 0, linkDistance = 350
)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_10p <- read.csv(file = 'edge_list_deg_81+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
edge_list_20p <- read.csv(file = 'edge_list_deg_73+.csv')
edge_list_25p <- read.csv(file = 'edge_list_deg_70+.csv')
print("10% chosen")
edge_list <- edge_list_10p
graph_object <- graph_from_data_frame(edge_list, directed = FALSE, vertices = NULL)
decomposed_g <- decompose.graph(graph_object)
View(decomposed_g)
edge_list_5p <- read.csv(file = 'edge_list_deg_85+.csv')
edge_list_10p <- read.csv(file = 'edge_list_deg_81+.csv')
edge_list_15p <- read.csv(file = 'edge_list_deg_78+.csv')
edge_list_20p <- read.csv(file = 'edge_list_deg_73+.csv')
edge_list_25p <- read.csv(file = 'edge_list_deg_70+.csv')
print("15% chosen")
edge_list <- edge_list_15p
graph_object <- graph_from_data_frame(edge_list, directed = FALSE, vertices = NULL)
# degrees_curr_g <- degree(graph_object)
decomposed_g <- decompose.graph(graph_object)
View(decomposed_g)
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/FYP_app')
runApp('~/Desktop/FYP_Project/Shiny/stackover_flow_Check/force_network_implementation_app.R')
